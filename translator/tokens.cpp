#line 1 "tokens.cpp"

#line 3 "tokens.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer ic__create_buffer
#define yy_delete_buffer ic__delete_buffer
#define yy_scan_buffer ic__scan_buffer
#define yy_scan_string ic__scan_string
#define yy_scan_bytes ic__scan_bytes
#define yy_init_buffer ic__init_buffer
#define yy_flush_buffer ic__flush_buffer
#define yy_load_buffer_state ic__load_buffer_state
#define yy_switch_to_buffer ic__switch_to_buffer
#define yypush_buffer_state ic_push_buffer_state
#define yypop_buffer_state ic_pop_buffer_state
#define yyensure_buffer_stack ic_ensure_buffer_stack
#define yy_flex_debug ic__flex_debug
#define yyin ic_in
#define yyleng ic_leng
#define yylex ic_lex
#define yylineno ic_lineno
#define yyout ic_out
#define yyrestart ic_restart
#define yytext ic_text
#define yywrap ic_wrap
#define yyalloc ic_alloc
#define yyrealloc ic_realloc
#define yyfree ic_free

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define ic__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer ic__create_buffer
#endif

#ifdef yy_delete_buffer
#define ic__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer ic__delete_buffer
#endif

#ifdef yy_scan_buffer
#define ic__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer ic__scan_buffer
#endif

#ifdef yy_scan_string
#define ic__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string ic__scan_string
#endif

#ifdef yy_scan_bytes
#define ic__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes ic__scan_bytes
#endif

#ifdef yy_init_buffer
#define ic__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer ic__init_buffer
#endif

#ifdef yy_flush_buffer
#define ic__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer ic__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define ic__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state ic__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define ic__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer ic__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define ic_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state ic_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define ic_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state ic_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define ic_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack ic_ensure_buffer_stack
#endif

#ifdef yylex
#define ic_lex_ALREADY_DEFINED
#else
#define yylex ic_lex
#endif

#ifdef yyrestart
#define ic_restart_ALREADY_DEFINED
#else
#define yyrestart ic_restart
#endif

#ifdef yylex_init
#define ic_lex_init_ALREADY_DEFINED
#else
#define yylex_init ic_lex_init
#endif

#ifdef yylex_init_extra
#define ic_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra ic_lex_init_extra
#endif

#ifdef yylex_destroy
#define ic_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy ic_lex_destroy
#endif

#ifdef yyget_debug
#define ic_get_debug_ALREADY_DEFINED
#else
#define yyget_debug ic_get_debug
#endif

#ifdef yyset_debug
#define ic_set_debug_ALREADY_DEFINED
#else
#define yyset_debug ic_set_debug
#endif

#ifdef yyget_extra
#define ic_get_extra_ALREADY_DEFINED
#else
#define yyget_extra ic_get_extra
#endif

#ifdef yyset_extra
#define ic_set_extra_ALREADY_DEFINED
#else
#define yyset_extra ic_set_extra
#endif

#ifdef yyget_in
#define ic_get_in_ALREADY_DEFINED
#else
#define yyget_in ic_get_in
#endif

#ifdef yyset_in
#define ic_set_in_ALREADY_DEFINED
#else
#define yyset_in ic_set_in
#endif

#ifdef yyget_out
#define ic_get_out_ALREADY_DEFINED
#else
#define yyget_out ic_get_out
#endif

#ifdef yyset_out
#define ic_set_out_ALREADY_DEFINED
#else
#define yyset_out ic_set_out
#endif

#ifdef yyget_leng
#define ic_get_leng_ALREADY_DEFINED
#else
#define yyget_leng ic_get_leng
#endif

#ifdef yyget_text
#define ic_get_text_ALREADY_DEFINED
#else
#define yyget_text ic_get_text
#endif

#ifdef yyget_lineno
#define ic_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno ic_get_lineno
#endif

#ifdef yyset_lineno
#define ic_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno ic_set_lineno
#endif

#ifdef yywrap
#define ic_wrap_ALREADY_DEFINED
#else
#define yywrap ic_wrap
#endif

#ifdef yyalloc
#define ic_alloc_ALREADY_DEFINED
#else
#define yyalloc ic_alloc
#endif

#ifdef yyrealloc
#define ic_realloc_ALREADY_DEFINED
#else
#define yyrealloc ic_realloc
#endif

#ifdef yyfree
#define ic_free_ALREADY_DEFINED
#else
#define yyfree ic_free
#endif

#ifdef yytext
#define ic_text_ALREADY_DEFINED
#else
#define yytext ic_text
#endif

#ifdef yyleng
#define ic_leng_ALREADY_DEFINED
#else
#define yyleng ic_leng
#endif

#ifdef yyin
#define ic_in_ALREADY_DEFINED
#else
#define yyin ic_in
#endif

#ifdef yyout
#define ic_out_ALREADY_DEFINED
#else
#define yyout ic_out
#endif

#ifdef yy_flex_debug
#define ic__flex_debug_ALREADY_DEFINED
#else
#define yy_flex_debug ic__flex_debug
#endif

#ifdef yylineno
#define ic_lineno_ALREADY_DEFINED
#else
#define yylineno ic_lineno
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 117
#define YY_END_OF_BUFFER 118
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[320] =
    {   0,
        0,    0,  112,  112,    0,    0,  106,  106,  106,  106,
      106,  106,    0,    0,    0,    0,  118,  116,    8,    9,
        7,   85,  116,  107,  116,   79,   87,  116,   58,   59,
       77,   75,   74,   76,   73,   78,   53,   53,   64,   65,
       69,   66,   71,   51,   60,   61,   88,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   62,   86,   63,   84,    8,    7,  101,  112,
      113,  117,  117,  106,  102,  105,  117,  104,    3,    5,
        4,  108,  109,    7,   68,    0,   57,    0,    0,  115,
      110,   97,   90,   98,    0,    0,   95,   80,   93,   81,

       94,    1,    0,   96,   52,   53,    0,    0,   83,   70,
       67,   72,   82,   51,   99,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   27,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,  100,   89,
        0,  101,    7,    0,  112,    0,  111,  106,  102,    0,
      103,  104,    3,    2,    0,  114,    0,   56,    0,    6,
       52,   55,   54,   92,   91,   51,   51,   24,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       32,   51,   51,   38,   51,   51,   51,   51,   51,   51,

       12,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,    0,   51,   51,   45,   51,   30,   37,
       51,   51,   51,   51,   51,   28,   51,   51,   51,   51,
       51,   40,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   14,   51,   51,   34,   51,   51,   36,   51,
        0,   51,   51,   50,   26,   46,   51,   51,   51,   51,
       35,   41,   51,   51,   51,   51,   51,   19,   51,   39,
       51,   51,   13,   11,   51,   51,   51,   51,   51,  101,
       16,   33,   51,   51,   42,   51,   51,   48,   51,   51,
       51,   49,   43,   18,   29,   51,   51,   22,   51,   51,

       31,   25,   51,   17,   10,   51,   15,   51,   51,   20,
       51,   23,   44,   47,   51,   51,   51,   21,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       22,   22,   22,   22,   22,   22,   22,   23,   24,   25,
       26,   27,    1,    1,   28,   28,   28,   28,   28,   28,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       30,   31,   32,   33,   29,    1,   34,   35,   36,   37,

       38,   39,   40,   41,   42,   29,   43,   44,   45,   46,
       47,   48,   29,   49,   50,   51,   52,   53,   54,   55,
       56,   57,   58,   59,   60,   61,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[62] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        3,    1,    1,    4,    1,    1,    1,    1,    1,    5,
        5,    5,    1,    1,    1,    1,    1,    5,    6,    1,
        7,    1,    1,    5,    5,    5,    5,    5,    5,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    1,    1,    1,
        1
    } ;

static const flex_int16_t yy_base[335] =
    {   0,
        0,   60,   60,   62,    0,    0,   67,   70,   73,   78,
       91,   94,   96,  103,  470,  469,  471,  474,  474,  474,
      466,  443,   72,  474,   97,  442,   75,  436,  474,  474,
      440,   92,  474,  102,  474,  106,  109,  115,  474,  474,
       83,  439,   95,    0,  474,  474,  438,   87,   92,  106,
      104,   58,   39,  407,  106,  415,  109,  423,  118,  106,
      414,  116,  474,   98,  474,  474,  163,  164,  415,  450,
      474,  449,  474,  171,  156,  474,  450,  159,    0,  474,
      436,  474,  474,  450,  474,  143,  474,  450,  179,  474,
      474,  474,  474,  474,  115,  180,  474,  474,  474,  474,

      474,  474,  449,  474,  164,  172,  141,    0,  425,  474,
      474,  474,  424,    0,  474,  398,  401,  396,  399,  407,
      394,  409,  404,  395,  401,  387,  388,  403,  392,  388,
      385,  385,    0,  144,  386,  381,  383,  149,  378,  381,
      156,  163,  385,  381,  373,  374,  387,  159,  474,  474,
      200,  378,  204,  379,  412,  411,  474,  210,  195,  412,
      474,  198,    0,  474,  218,  474,  414,  474,  413,  474,
      202,  207,    0,  474,  474,  373,  369,    0,  369,  378,
      373,  361,  375,  179,  374,  372,  368,  370,  354,  369,
        0,  364,  359,    0,  360,  349,  362,  355,  358,  343,

        0,  345,  347,  354,  182,  343,  339,  351,  350,  345,
      335,  348,  350,  337,  329,  339,    0,  337,    0,    0,
      333,  327,  335,  324,  331,    0,  330,  335,  321,  322,
      324,    0,  327,  330,  317,  315,  316,  313,  325,  315,
      310,  322,    0,  323,  311,    0,  317,  309,    0,  304,
      316,  315,  316,    0,    0,    0,  305,  306,  311,  310,
        0,    0,  299,  308,  292,  294,  292,    0,  296,    0,
      304,  301,    0,    0,  298,  286,  291,  287,  293,  474,
        0,    0,  282,  282,    0,  295,  282,    0,  292,  279,
      290,    0,    0,    0,    0,  276,  288,    0,  257,  261,

        0,    0,  246,    0,    0,  237,    0,  241,  194,    0,
      189,    0,    0,    0,  171,  155,  148,    0,  474,  233,
      240,  247,  254,  261,  268,  275,  278,  284,  291,  297,
      304,  311,   61,  318
    } ;

static const flex_int16_t yy_def[335] =
    {   0,
      319,    1,  320,  320,  321,  321,  321,  321,  321,  321,
      321,  321,  322,  322,  323,  323,  319,  319,  319,  319,
      319,  319,  324,  319,  325,  319,  319,  326,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  327,  319,  319,  319,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  319,  319,  319,  319,  319,  319,  319,  328,
      319,  328,  319,  319,  319,  319,  329,  319,  330,  319,
      319,  319,  319,  319,  319,  324,  319,  324,  331,  319,
      319,  319,  319,  319,  326,  326,  319,  319,  319,  319,

      319,  319,  332,  319,  319,  319,  319,  333,  319,  319,
      319,  319,  319,  327,  319,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  319,  319,
      319,  319,  319,  319,  328,  328,  319,  319,  319,  329,
      319,  319,  330,  319,  331,  319,  334,  319,  332,  319,
      319,  319,  333,  319,  319,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,

      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  319,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      319,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  319,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,

      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,    0,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319
    } ;

static const flex_int16_t yy_nxt[536] =
    {   0,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   38,   39,   40,   41,   42,   43,   44,   44,   45,
       18,   46,   47,   48,   49,   50,   51,   52,   53,   44,
       54,   55,   44,   56,   44,   44,   44,   57,   58,   59,
       60,   61,   62,   44,   44,   44,   44,   63,   64,   65,
       66,   67,   71,   68,   71,  173,   69,   72,   74,   72,
       74,   74,  129,   74,   74,   76,   74,   87,   77,   74,
       76,   74,  130,   77,   93,  131,   75,   75,   75,   75,
       75,   75,   74,   76,   74,   74,   76,   74,   80,   90,

       94,  127,   88,  128,   91,   80,   98,  109,  110,   81,
       78,   78,   78,   78,   78,   78,   81,   99,  100,  102,
      112,  113,  116,  149,  103,  168,  105,  101,  106,  106,
      106,  104,  105,  118,  106,  106,  106,  117,  119,  121,
      120,  125,  136,  107,  133,   96,  122,  144,   87,  123,
      126,  134,  124,  147,  145,  139,  150,  137,  140,  141,
      172,  172,  148,  108,  151,  151,  151,  153,  142,  152,
      152,  143,  158,   88,  158,  159,  159,  159,  162,  162,
      162,  166,  319,  171,  171,  171,  167,  193,  198,  105,
       95,  106,  106,  106,  194,  203,  205,  318,  199,  200,

      212,  151,  213,  151,  317,  151,  152,  153,  316,  206,
      152,  158,  204,  158,  159,  159,  159,  162,  162,  162,
      166,  171,  171,  171,  315,  167,  172,  172,  222,  223,
      241,  314,  242,   70,   70,   70,   70,   70,   70,   70,
       73,   73,   73,   73,   73,   73,   73,   79,   79,   79,
       79,   79,   79,   79,   82,   82,   82,   82,   82,   82,
       82,   86,   86,   86,   86,   86,   86,   86,   89,   89,
       89,   89,   89,   89,   89,   95,   95,  313,   95,   95,
       95,   95,  114,  114,  155,  312,  155,  155,  155,  155,
      155,  160,  311,  160,  160,  160,  160,  163,  310,  163,

      309,  163,  163,  163,  165,  165,  165,  165,  165,  165,
      165,  169,  169,  169,  169,  169,  169,  169,  167,  167,
      167,  167,  167,  167,  167,  308,  307,  306,  305,  304,
      303,  302,  301,  300,  299,  298,  297,  296,  295,  294,
      293,  292,  291,  290,  289,  288,  287,  286,  285,  284,
      283,  282,  281,  280,  279,  278,  277,  276,  275,  274,
      273,  272,  271,  270,  269,  268,  267,  266,  265,  264,
      263,  262,  261,  260,  259,  258,  257,  256,  255,  254,
      253,  252,  251,  250,  249,  248,  247,  246,  245,  244,
      243,  240,  239,  238,  237,  236,  235,  234,  233,  232,

      231,  230,  229,  228,  227,  226,  225,  224,  221,  220,
      219,  218,  217,  216,  215,  170,  166,  161,  319,  156,
      214,  154,  211,  210,  209,  208,  207,  202,  201,  197,
      196,  195,  192,  191,  190,  189,  188,  187,  186,  185,
      184,  183,  182,  181,  180,  179,  178,  177,  176,  175,
      174,  170,  319,   84,  164,  161,  157,  156,  154,  146,
      138,  135,  132,  115,  111,   97,   96,   92,   85,   84,
      319,   83,   83,   17,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,

      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319
    } ;

static const flex_int16_t yy_chk[536] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    3,    2,    4,  333,    2,    3,    7,    4,
        7,    8,   53,    8,    9,    9,    9,   23,    9,   10,
       10,   10,   53,   10,   27,   53,    7,    7,    7,    8,
        8,    8,   11,   11,   11,   12,   12,   12,   13,   25,

       27,   52,   23,   52,   25,   14,   32,   41,   41,   13,
       11,   11,   11,   12,   12,   12,   14,   32,   34,   36,
       43,   43,   48,   64,   36,   95,   37,   34,   37,   37,
       37,   36,   38,   49,   38,   38,   38,   48,   49,   50,
       49,   51,   57,   37,   55,   95,   50,   60,   86,   50,
       51,   55,   50,   62,   60,   59,   64,   57,   59,   59,
      107,  107,   62,   37,   67,   68,   67,   68,   59,   67,
       68,   59,   74,   86,   74,   75,   75,   75,   78,   78,
       78,   89,   96,  105,  105,  105,   89,  134,  138,  106,
       96,  106,  106,  106,  134,  141,  142,  317,  138,  138,

      148,  151,  148,  151,  316,  153,  151,  153,  315,  142,
      153,  158,  141,  158,  159,  159,  159,  162,  162,  162,
      165,  171,  171,  171,  311,  165,  172,  172,  184,  184,
      205,  309,  205,  320,  320,  320,  320,  320,  320,  320,
      321,  321,  321,  321,  321,  321,  321,  322,  322,  322,
      322,  322,  322,  322,  323,  323,  323,  323,  323,  323,
      323,  324,  324,  324,  324,  324,  324,  324,  325,  325,
      325,  325,  325,  325,  325,  326,  326,  308,  326,  326,
      326,  326,  327,  327,  328,  306,  328,  328,  328,  328,
      328,  329,  303,  329,  329,  329,  329,  330,  300,  330,

      299,  330,  330,  330,  331,  331,  331,  331,  331,  331,
      331,  332,  332,  332,  332,  332,  332,  332,  334,  334,
      334,  334,  334,  334,  334,  297,  296,  291,  290,  289,
      287,  286,  284,  283,  279,  278,  277,  276,  275,  272,
      271,  269,  267,  266,  265,  264,  263,  260,  259,  258,
      257,  253,  252,  251,  250,  248,  247,  245,  244,  242,
      241,  240,  239,  238,  237,  236,  235,  234,  233,  231,
      230,  229,  228,  227,  225,  224,  223,  222,  221,  218,
      216,  215,  214,  213,  212,  211,  210,  209,  208,  207,
      206,  204,  203,  202,  200,  199,  198,  197,  196,  195,

      193,  192,  190,  189,  188,  187,  186,  185,  183,  182,
      181,  180,  179,  177,  176,  169,  167,  160,  156,  155,
      154,  152,  147,  146,  145,  144,  143,  140,  139,  137,
      136,  135,  132,  131,  130,  129,  128,  127,  126,  125,
      124,  123,  122,  121,  120,  119,  118,  117,  116,  113,
      109,  103,   88,   84,   81,   77,   72,   70,   69,   61,
       58,   56,   54,   47,   42,   31,   28,   26,   22,   21,
       17,   16,   15,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,

      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "tokens.l"
#line 2 "tokens.l"
#include <string>
#include "iCProgram.h"
#include "iCScope.h" 
#include "ParserContext.h"
#include "iCIdentifier.h"
#include "iCProcess.h"
#include "iCState.h"
#include "CCode.h"
#include "iCTimeout.h"
#include "iCHyperprocess.h"

#include "parser.hpp"

#define SAVE_TOKEN ic_lval.string = new std::string(ic_text, ic_leng)
#define TOKEN(t) (ic_lval.token = t)
extern "C" int ic_wrap() { }
extern ParserContext* parser_context;

const int IC_TAB_SIZE = 4;

#define YY_USER_ACTION parser_context->inc_column(ic_leng);

#line 951 "tokens.cpp"

#line 953 "tokens.cpp"

#define INITIAL 0
#define C_CODE 1
#define PREPROCESSOR 2
#define LM_LINENUM 3
#define LM_FILE 4
#define LM_FLAGS 5
#define COMMENT 6
#define SKIP_TO_NEWLINE 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 38 "tokens.l"

#line 1182 "tokens.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 320 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 474 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 39 "tokens.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 40 "tokens.l"
BEGIN(INITIAL);
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 41 "tokens.l"
{
							SAVE_TOKEN;
							std::string* str = ic_lval.string;
							//std::cout<<"comment line \""<<*str<<"\""<<std::endl;
							return TCOMMENTLINE;
						}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 47 "tokens.l"

	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 48 "tokens.l"
parser_context->inc_line_num();           		
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 50 "tokens.l"
{
							SAVE_TOKEN;
							std::string* str = ic_lval.string;
							str->erase(0, 2); // trim the dollar sign
							str->erase(str->end()-1, str->end()); // trim the newline
							//std::cout<<"comment line \""<<*str<<"\""<<std::endl;
							return TCOMMENTLINE;
						}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 58 "tokens.l"
;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 59 "tokens.l"
{parser_context->to_prev_column(); parser_context->tab_column(IC_TAB_SIZE);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 60 "tokens.l"
parser_context->inc_line_num(); 	
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 61 "tokens.l"
return TOKEN(TPROC			);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 62 "tokens.l"
return TOKEN(TSTATE			);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 63 "tokens.l"
return TOKEN(TSET			);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 64 "tokens.l"
return TOKEN(TSTART			);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 65 "tokens.l"
return TOKEN(TSTOP			);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 66 "tokens.l"
return TOKEN(TTIMEOUT		);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 67 "tokens.l"
return TOKEN(TACTIVE		);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 68 "tokens.l"
return TOKEN(TPASSIVE		);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 69 "tokens.l"
return TOKEN(TSIZEOF		);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 70 "tokens.l"
return TOKEN(TRESET			);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 71 "tokens.l"
return TOKEN(TCONTINUE		);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 73 "tokens.l"
return TOKEN(THYPERPROCESS	);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 74 "tokens.l"
return TOKEN(TVECTOR		);	
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 75 "tokens.l"
return TOKEN(TREGISTER		);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 76 "tokens.l"
return TOKEN(TBIT			);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 77 "tokens.l"
return TOKEN(TENABLED		);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 78 "tokens.l"
return TOKEN(TCLEAN			);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 79 "tokens.l"
return TOKEN(TIF			);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 80 "tokens.l"
return TOKEN(TELSE			);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 81 "tokens.l"
return TOKEN(TSWITCH		);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 82 "tokens.l"
return TOKEN(TCASE			);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 83 "tokens.l"
return TOKEN(TDEFAULT		);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 84 "tokens.l"
return TOKEN(TFOR			);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 85 "tokens.l"
return TOKEN(TATOMIC		);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 87 "tokens.l"
return TOKEN(TTRUE			);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 88 "tokens.l"
return TOKEN(TFALSE	 		);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 90 "tokens.l"
SAVE_TOKEN; return TVOID	 ;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 91 "tokens.l"
SAVE_TOKEN; return TCHAR	 ;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 92 "tokens.l"
SAVE_TOKEN; return TINT		 ;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 93 "tokens.l"
SAVE_TOKEN; return TSHORT	 ;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 94 "tokens.l"
SAVE_TOKEN; return TLONG	 ;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 95 "tokens.l"
SAVE_TOKEN; return TFLT		 ;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 96 "tokens.l"
SAVE_TOKEN; return TDBL		 ;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 97 "tokens.l"
SAVE_TOKEN; return TSGND	 ;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 98 "tokens.l"
SAVE_TOKEN; return TUNSGND	 ;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 99 "tokens.l"
SAVE_TOKEN; return TBOOL	 ;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 101 "tokens.l"
SAVE_TOKEN; return TCONST	 ;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 102 "tokens.l"
SAVE_TOKEN; return TVOLATILE ;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 103 "tokens.l"
SAVE_TOKEN; return TINLINE   ;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 105 "tokens.l"
SAVE_TOKEN; return TRETURN	 ;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 106 "tokens.l"
SAVE_TOKEN; return TBREAK	 ;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 108 "tokens.l"
SAVE_TOKEN; return TIDENTIFIER	;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 109 "tokens.l"
SAVE_TOKEN; return TDCONST		;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 110 "tokens.l"
{SAVE_TOKEN; return TICONST;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 111 "tokens.l"
{SAVE_TOKEN; return THCONST;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 112 "tokens.l"
{SAVE_TOKEN; return TBCONST;}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 113 "tokens.l"
{SAVE_TOKEN; return TSTRING;}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 114 "tokens.l"
{SAVE_TOKEN; return TSTRING;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 116 "tokens.l"
return TOKEN(TLPAREN);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 117 "tokens.l"
return TOKEN(TRPAREN);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 118 "tokens.l"
return TOKEN(TLBRACKET);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 119 "tokens.l"
return TOKEN(TRBRACKET);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 120 "tokens.l"
return TOKEN(TLBRACE);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 121 "tokens.l"
return TOKEN(TRBRACE);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 122 "tokens.l"
return TOKEN(TCOLON);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 123 "tokens.l"
return TOKEN(TSEMIC	);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 124 "tokens.l"
SAVE_TOKEN; return TASSGN	;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 125 "tokens.l"
SAVE_TOKEN; return TEQ		;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 126 "tokens.l"
SAVE_TOKEN; return TNEQ		;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 127 "tokens.l"
SAVE_TOKEN; return TLT		;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 128 "tokens.l"
SAVE_TOKEN; return TLE		;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 129 "tokens.l"
SAVE_TOKEN; return TGT		;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 130 "tokens.l"
SAVE_TOKEN; return TGE		;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 131 "tokens.l"
SAVE_TOKEN; return TDOT		;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 132 "tokens.l"
SAVE_TOKEN; return TCOMMA	;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 133 "tokens.l"
SAVE_TOKEN; return TPLUS	;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 134 "tokens.l"
SAVE_TOKEN; return TMINUS	;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 135 "tokens.l"
SAVE_TOKEN; return TASTERISK		;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 136 "tokens.l"
SAVE_TOKEN; return TDIV		;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 137 "tokens.l"
SAVE_TOKEN; return TPERC	;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 138 "tokens.l"
SAVE_TOKEN; return TINC		;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 139 "tokens.l"
SAVE_TOKEN; return TDEC		;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 140 "tokens.l"
SAVE_TOKEN; return TRSHIFT	;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 141 "tokens.l"
SAVE_TOKEN; return TLSHIFT	;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 142 "tokens.l"
SAVE_TOKEN; return TTILDE	;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 143 "tokens.l"
SAVE_TOKEN; return TEXCLAM	;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 144 "tokens.l"
SAVE_TOKEN; return TOR		;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 145 "tokens.l"
SAVE_TOKEN; return TAND		;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 146 "tokens.l"
SAVE_TOKEN; return TXOR		;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 147 "tokens.l"
SAVE_TOKEN; return TLOR		;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 148 "tokens.l"
SAVE_TOKEN; return TLAND	;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 149 "tokens.l"
SAVE_TOKEN; return TR_ASSGN	;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 150 "tokens.l"
SAVE_TOKEN; return TL_ASSGN	;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 151 "tokens.l"
SAVE_TOKEN; return TPLUS_ASSGN	;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 152 "tokens.l"
SAVE_TOKEN; return TMINUS_ASSGN	;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 153 "tokens.l"
SAVE_TOKEN; return TASTERISK_ASSGN	;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 154 "tokens.l"
SAVE_TOKEN; return TDIV_ASSGN	;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 155 "tokens.l"
SAVE_TOKEN; return TPERC_ASSGN	;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 156 "tokens.l"
SAVE_TOKEN; return TAND_ASSGN	;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 157 "tokens.l"
SAVE_TOKEN; return TXOR_ASSGN	;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 158 "tokens.l"
SAVE_TOKEN; return TOR_ASSGN	;
	YY_BREAK



case 101:
YY_RULE_SETUP
#line 163 "tokens.l"
BEGIN(LM_LINENUM);
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 164 "tokens.l"
{
										parser_context->set_line(atoi(ic_text)); 
										parser_context->reset_column(); 
										BEGIN(LM_FILE);
									}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 169 "tokens.l"
{
										std::string* str = new std::string(ic_text, ic_leng);
										str->erase(0, 1); // trim the starting quote
										str->erase(str->end()-1, str->end()); // trim the ending quote
										parser_context->set_file(*str);
										delete str; 
										BEGIN(LM_FLAGS);
									}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 177 "tokens.l"
;
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 178 "tokens.l"
BEGIN(INITIAL);
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 179 "tokens.l"
;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 181 "tokens.l"
parser_context->err_msg("stray # in program"); BEGIN(SKIP_TO_NEWLINE);
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 182 "tokens.l"
;
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 183 "tokens.l"
BEGIN(INITIAL);
	YY_BREAK



case 110:
YY_RULE_SETUP
#line 188 "tokens.l"
BEGIN(C_CODE); ic_lval.string = new std::string;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 189 "tokens.l"
BEGIN(INITIAL); return TCCODEEXPR;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 190 "tokens.l"
/*SAVE_TOKEN; return TCCODELINE;*/(*ic_lval.string)+=" "+std::string(ic_text);
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 191 "tokens.l"
parser_context->inc_line_num();	
	YY_BREAK



case 114:
/* rule 114 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 196 "tokens.l"
{
								SAVE_TOKEN;
								std::string* str = ic_lval.string;
								//parser_context->err_msg("adding c code line %s", str->c_str());
								str->erase(0, 1); // trim the dollar sign
								//str->erase(str->end()-1, str->end()); // trim the newline
								//parser_context->inc_line_num();
								return TCCODELINE;
							}
	YY_BREAK
case 115:
/* rule 115 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 1);
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 205 "tokens.l"
/*parser_context->inc_line_num();*/
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 210 "tokens.l"
printf("Unknown token at line %ul\n", parser_context->line()); yyterminate();
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 212 "tokens.l"
ECHO;
	YY_BREAK
#line 1883 "tokens.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(C_CODE):
case YY_STATE_EOF(PREPROCESSOR):
case YY_STATE_EOF(LM_LINENUM):
case YY_STATE_EOF(LM_FILE):
case YY_STATE_EOF(LM_FLAGS):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(SKIP_TO_NEWLINE):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 320 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 320 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 319);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 212 "tokens.l"



